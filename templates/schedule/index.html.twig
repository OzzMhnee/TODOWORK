{% extends 'base.html.twig' %}

{% block body %}
<div class="min-h-screen bg-gradient-to-br from-blue-50 via-white to-gray-100 py-8 px-2">
    <div class="max-w-7xl mx-auto flex flex-col md:flex-row gap-8">
        <div class="flex-1">
            <div class="bg-white rounded-2xl shadow-lg p-6 mb-8">
                <h2 class="text-2xl font-extrabold text-blue-700 mb-4 flex items-center gap-2">
                    <svg class="w-6 h-6 text-blue-400" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><rect x="3" y="4" width="18" height="18" rx="2"/><path d="M16 2v4M8 2v4M3 10h18"/></svg>
                    Emploi du temps personnel
                </h2>
                <div id="calendar" class="rounded-lg overflow-hidden border border-blue-100 bg-blue-50"></div>
            </div>
            <div class="bg-white rounded-2xl shadow-lg p-6">
                <h2 class="text-2xl font-extrabold text-purple-700 mb-4 flex items-center gap-2">
                    <svg class="w-6 h-6 text-purple-400" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><rect x="3" y="3" width="18" height="18" rx="2"/><path d="M5 13l4 4L19 7"/></svg>
                    Diagramme d'Eisenhower - Projets de l'équipe au complet
                </h2>
                <h5><em>Ici vous pouvez voir l'ensemble des projets en cours par votre équipe, n'hésitez pas à les consulter en cas de trou sur votre planning pour proposer d'en récupérer un urgent !</em></h5>
                <div id="eisenhower" class="grid grid-cols-2 grid-rows-2 gap-4 border-2 border-gray-200 rounded-xl p-4 bg-gray-50 min-h-[400px]">
                    {% set quadrants = {
                        'urgent-important': 'Urgent & Important',
                        'not-urgent-important': 'Non urgent & Important',
                        'urgent-not-important': 'Urgent & Pas important',
                        'not-urgent-not-important': 'Non urgent & Pas important'
                    } %}
                    {% for key, label in quadrants %}
                        <div class="border-2 rounded-lg p-4 min-h-[120px] flex flex-col"
                            data-quadrant="{{ key }}">
                            <span class="font-bold mb-2
                                {% if key == 'urgent-important' %}text-green-700
                                {% elseif key == 'not-urgent-important' %}text-yellow-700
                                {% elseif key == 'urgent-not-important' %}text-red-700
                                {% else %}text-blue-700{% endif %}">
                                {{ label }}
                            </span>
                            {# Cards à afficher dans ce quadrant #}
                            {% for card in cards %}
                                {# Récupère le projet parent #}
                                {% set project = card.board and card.board.project ? card.board.project : null %}
                                {# Vérifie owner ou membership #}
                                {% set is_owner = project and app.user and project.createdBy and project.createdBy.id == app.user.id %}
                                {% set is_member = false %}
                                {% if project and app.user %}
                                    {% for membership in project.memberShips %}
                                        {% if membership.person and membership.person.id == app.user.id %}
                                            {% set is_member = true %}
                                        {% endif %}
                                    {% endfor %}
                                {% endif %}
                                {# Vérifie si non archivée #}
                                {% if (is_owner or is_member) and not card.archivedAt %}
                                    {% set card_label = card.label ? card.label.name|lower : '' %}
                                    {% if (key == 'urgent-important' and card_label == 'urgent & important')
                                        or (key == 'not-urgent-important' and card_label == 'non urgent & important')
                                        or (key == 'urgent-not-important' and card_label == 'urgent & pas important')
                                        or (key == 'not-urgent-not-important' and card_label == 'non urgent & pas important') %}
                                        <li class="draggable mb-2 p-2 rounded shadow cursor-move border"
                                            style="background: {{ card.label ? card.label.color : '#e0e7ff' }};"
                                            data-card-id="{{ card.id }}"
                                            data-card-color="{{ card.label ? card.label.color : '#3b82f6' }}"
                                            data-card-description="{{ card.description|e('html_attr') }}">
                                            <span class="font-semibold text-white">{{ card.title }}</span>
                                        </li>
                                    {% endif %}
                                {% endif %}
                            {% endfor %}
                        </div>
                    {% endfor %}
                </div>
            </div>
        </div>
        <div class="w-full md:w-80">
            <div class="bg-white rounded-2xl shadow-lg p-6 sticky top-8">
                <h2 class="text-2xl font-extrabold text-gray-700 mb-4 flex items-center gap-2">
                    <svg class="w-6 h-6 text-gray-400" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24"><rect x="3" y="3" width="18" height="18" rx="2"/><path d="M9 9h6v6H9z"/></svg>
                    Tâches à placer
                </h2>
                <ul id="todo-list" class="space-y-3">
                    {% set hasCard = false %}
                    {% for card in cards %}
                        {% if not card.scheduledAt %}
                            {% set hasCard = true %}
                            <li class="draggable p-3 rounded-lg shadow flex items-center gap-2 cursor-move border hover:shadow-lg transition"
                                style="background: {{ card.label ? card.label.color : '#3b82f6' }};"
                                data-card-id="{{ card.id }}"
                                data-card-color="{{ card.label ? card.label.color : '#3b82f6' }}"
                                data-card-description="{{ card.description|e('html_attr') }}">
                                <span class="font-semibold text-white">{{ card.title }}</span>
                            </li>
                        {% endif %}
                    {% endfor %}
                    {% if not hasCard %}
                        <li class="text-gray-400 text-center">Aucune tâche à placer</li>
                    {% endif %}
            </div>
        </div>
    </div>
</div>

<link href="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/index.global.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/index.global.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/locales/fr.global.min.js"></script>

<div id="calendar-period" class="text-lg font-semibold text-blue-700 mb-2"></div>

<script>
function formatFrenchPeriod(start, end) {
    const optionsDay = { day: 'numeric' };
    const optionsMonthYear = { month: 'long', year: 'numeric' };
    const startDay = start.toLocaleDateString('fr-FR', optionsDay);
    const endDay = end.toLocaleDateString('fr-FR', optionsDay);
    const startMonthYear = start.toLocaleDateString('fr-FR', optionsMonthYear);
    const endMonthYear = end.toLocaleDateString('fr-FR', optionsMonthYear);

    if (startMonthYear === endMonthYear) {
        return `Du ${startDay} au ${endDay} ${startMonthYear}`;
    } else {
        return `Du ${startDay} ${startMonthYear} au ${endDay} ${endMonthYear}`;
    }
}

document.addEventListener('DOMContentLoaded', function() {
    // Rendre la liste "À placer" draggables pour FullCalendar
    new FullCalendar.Draggable(document.getElementById('todo-list'), {
        itemSelector: '.draggable',
        eventData: function(eventEl) {
            return {
                title: eventEl.innerText,
                id: eventEl.dataset.cardId,
                backgroundColor: eventEl.dataset.cardColor || '#3b82f6',
                borderColor: eventEl.dataset.cardColor || '#3b82f6',
                description: eventEl.dataset.cardDescription || '',
                duration: '01:00'
            };
        }
    });

    // Rendre la liste "À placer" droppable pour les events du calendrier
    const todoList = document.getElementById('todo-list');
    todoList.addEventListener('dragover', function(e) {
        e.preventDefault();
        todoList.classList.add('ring', 'ring-blue-400');
    });
    todoList.addEventListener('dragleave', function(e) {
        todoList.classList.remove('ring', 'ring-blue-400');
    });
    todoList.addEventListener('drop', function(e) {
        e.preventDefault();
        todoList.classList.remove('ring', 'ring-blue-400');
        // Récupère l'id de l'event FullCalendar déplacé
        const eventId = e.dataTransfer.getData('card-id');
        if (eventId) {
            fetch('/card/' + eventId + '/schedule', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest',
                    'X-CSRF-TOKEN': '{{ csrf_token("schedule") }}'
                },
                body: JSON.stringify({
                    scheduled_at: null,
                    scheduled_end_at: null
                })
            }).then(r => r.json()).then(data => {
                window.location.reload();
            });
        }
    });

    // 2. FullCalendar config
    var calendarEl = document.getElementById('calendar');
    var calendar = new FullCalendar.Calendar(calendarEl, {
        initialView: 'timeGridWeek',
        editable: true,
        droppable: true,
        eventResizableFromStart: true,
        eventDurationEditable: true,
        locale: 'fr',
        timeZone: 'local',
        slotLabelFormat: {
            hour: '2-digit',
            minute: '2-digit',
            hour12: false
        },
        events: {{ calendarEvents|json_encode|raw }},
        validRange: {
            start: new Date().toISOString().slice(0,10) // aujourd'hui
        },
        datesSet: function(info) {
            document.getElementById('calendar-period').textContent = formatFrenchPeriod(info.start, new Date(info.end.getTime() - 1));
        },
        eventContent: function(arg) {
            let wrapper = document.createElement('div');
            wrapper.setAttribute('draggable', 'true');
            wrapper.style.cursor = 'move';
            wrapper.className = "flex items-center justify-between";

            let titleEl = document.createElement('span');
            titleEl.className = "font-semibold";
            titleEl.textContent = arg.event.title;

            // Ajout du bouton croix pour déplanifier
            let removeBtn = document.createElement('button');
            removeBtn.innerHTML = '✖️';
            removeBtn.title = "Retirer du planning";
            removeBtn.className = "ml-2 text-xs text-red-600 hover:text-red-800";
            removeBtn.style.background = "none";
            removeBtn.style.border = "none";
            removeBtn.style.cursor = "pointer";
            removeBtn.addEventListener('click', function(e) {
                e.stopPropagation();
                if (confirm("Remettre cette carte dans 'À placer' ?")) {
                    fetch('/card/' + arg.event.id + '/schedule', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest',
                            'X-CSRF-TOKEN': '{{ csrf_token("schedule") }}'
                        },
                        body: JSON.stringify({
                            scheduled_at: null,
                            scheduled_end_at: null
                        })
                    }).then(r => r.json()).then(data => {
                        window.location.reload();
                    });
                }
            });

            wrapper.appendChild(titleEl);
            wrapper.appendChild(removeBtn);

            // Ajout du drag vers la liste "À placer"
            wrapper.addEventListener('dragstart', function(e) {
                e.dataTransfer.setData('card-id', arg.event.id);
            });

            let arrayOfDomNodes = [ wrapper ];

            // Description
            if (arg.event.extendedProps.description) {
                let hr1 = document.createElement('hr');
                hr1.className = "my-1 border-gray-300";
                arrayOfDomNodes.push(hr1);

                let descEl = document.createElement('div');
                descEl.innerHTML = '<span class="text-xs text-gray-700">' + arg.event.extendedProps.description + '</span>';
                arrayOfDomNodes.push(descEl);
            }

            return { domNodes: arrayOfDomNodes };
        },
        eventReceive: function(info) {
            const cardId = info.event.id;
            const start = info.event.start;
            const end = info.event.end || null;
            const today = new Date();
            today.setHours(0,0,0,0);
            if (start < today) {
                info.revert();
                alert("Impossible de placer une carte avant aujourd'hui !");
                return;
            }
            fetch('/card/' + cardId + '/schedule', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest',
                    'X-CSRF-TOKEN': '{{ csrf_token("schedule") }}'
                },
                body: JSON.stringify({
                    scheduled_at: start.toISOString(),
                    scheduled_end_at: end ? end.toISOString() : null
                })
            }).then(r => r.json()).then(data => {
                window.location.reload();
            });
        },
        eventResize: function(info) {
            // Sauvegarde de la nouvelle durée (heure de fin) lors du redimensionnement
            const cardId = info.event.id;
            const start = info.event.start;
            const end = info.event.end || null;
            fetch('/card/' + cardId + '/schedule', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest',
                    'X-CSRF-TOKEN': '{{ csrf_token("schedule") }}'
                },
                body: JSON.stringify({
                    scheduled_at: start.toISOString(),
                    scheduled_end_at: end ? end.toISOString() : null
                })
            }).then(r => r.json()).then(data => {
                // Optionnel : feedback utilisateur
            });
        },
        eventDrop: function(info) {
            // Sauvegarde la nouvelle date de début/fin lors du déplacement
            const cardId = info.event.id;
            const start = info.event.start;
            const end = info.event.end || null;
            const today = new Date();
            today.setHours(0,0,0,0);
            if (start < today) {
                info.revert();
                alert("Impossible de déplacer une carte avant aujourd'hui !");
                return;
            }
            fetch('/card/' + cardId + '/schedule', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest',
                    'X-CSRF-TOKEN': '{{ csrf_token("schedule") }}'
                },
                body: JSON.stringify({
                    scheduled_at: start.toISOString(),
                    scheduled_end_at: end ? end.toISOString() : null
                })
            }).then(r => r.json()).then(data => {
                // Optionnel : feedback utilisateur
            });
        },
        eventDidMount: function(info) {
            // Ajoute le tooltip au hover
            info.el.title = info.event.extendedProps.description || '';
        },
        eventClick: function(info) {
            // Redirige vers la page de la card
            window.location.href = '/card/' + info.event.id;
        }
    });
    calendar.render();

    // 3. Clic sur une card du diagramme Eisenhower : redirige vers la page de la card
    document.querySelectorAll('.draggable').forEach(el => {
        el.removeAttribute('draggable');
        el.style.cursor = 'pointer';
        el.addEventListener('click', function() {
            const cardId = el.dataset.cardId;
            if (cardId) {
                window.location.href = '/card/' + cardId;
            }
        });
    });
});
</script>
{% endblock %}
